// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\services\keepservice.go

// Package mock_services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	models "github.com/Dorrrke/GophKeeper-client/internal/domain/models"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// ClearDB mocks base method.
func (m *MockStorage) ClearDB(ctx context.Context, uId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearDB", ctx, uId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearDB indicates an expected call of ClearDB.
func (mr *MockStorageMockRecorder) ClearDB(ctx, uId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearDB", reflect.TypeOf((*MockStorage)(nil).ClearDB), ctx, uId)
}

// DeleteBin mocks base method.
func (m *MockStorage) DeleteBin(ctx context.Context, name string, uID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBin", ctx, name, uID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBin indicates an expected call of DeleteBin.
func (mr *MockStorageMockRecorder) DeleteBin(ctx, name, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBin", reflect.TypeOf((*MockStorage)(nil).DeleteBin), ctx, name, uID)
}

// DeleteCard mocks base method.
func (m *MockStorage) DeleteCard(ctx context.Context, name string, uID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCard", ctx, name, uID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCard indicates an expected call of DeleteCard.
func (mr *MockStorageMockRecorder) DeleteCard(ctx, name, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockStorage)(nil).DeleteCard), ctx, name, uID)
}

// DeleteLogin mocks base method.
func (m *MockStorage) DeleteLogin(ctx context.Context, name string, uID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogin", ctx, name, uID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogin indicates an expected call of DeleteLogin.
func (mr *MockStorageMockRecorder) DeleteLogin(ctx, name, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogin", reflect.TypeOf((*MockStorage)(nil).DeleteLogin), ctx, name, uID)
}

// DeleteText mocks base method.
func (m *MockStorage) DeleteText(ctx context.Context, name string, uID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteText", ctx, name, uID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteText indicates an expected call of DeleteText.
func (mr *MockStorageMockRecorder) DeleteText(ctx, name, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteText", reflect.TypeOf((*MockStorage)(nil).DeleteText), ctx, name, uID)
}

// GetAllBin mocks base method.
func (m *MockStorage) GetAllBin(ctx context.Context, uID int64) ([]models.BinaryDataModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBin", ctx, uID)
	ret0, _ := ret[0].([]models.BinaryDataModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBin indicates an expected call of GetAllBin.
func (mr *MockStorageMockRecorder) GetAllBin(ctx, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBin", reflect.TypeOf((*MockStorage)(nil).GetAllBin), ctx, uID)
}

// GetAllCards mocks base method.
func (m *MockStorage) GetAllCards(ctx context.Context, uID int64) ([]models.CardModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCards", ctx, uID)
	ret0, _ := ret[0].([]models.CardModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCards indicates an expected call of GetAllCards.
func (mr *MockStorageMockRecorder) GetAllCards(ctx, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCards", reflect.TypeOf((*MockStorage)(nil).GetAllCards), ctx, uID)
}

// GetAllLogins mocks base method.
func (m *MockStorage) GetAllLogins(ctx context.Context, uID int64) ([]models.LoginModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLogins", ctx, uID)
	ret0, _ := ret[0].([]models.LoginModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLogins indicates an expected call of GetAllLogins.
func (mr *MockStorageMockRecorder) GetAllLogins(ctx, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLogins", reflect.TypeOf((*MockStorage)(nil).GetAllLogins), ctx, uID)
}

// GetAllSaves mocks base method.
func (m *MockStorage) GetAllSaves(ctx context.Context, uID int64) (models.SyncModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSaves", ctx, uID)
	ret0, _ := ret[0].(models.SyncModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSaves indicates an expected call of GetAllSaves.
func (mr *MockStorageMockRecorder) GetAllSaves(ctx, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSaves", reflect.TypeOf((*MockStorage)(nil).GetAllSaves), ctx, uID)
}

// GetAllTextData mocks base method.
func (m *MockStorage) GetAllTextData(ctx context.Context, uID int64) ([]models.TextDataModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTextData", ctx, uID)
	ret0, _ := ret[0].([]models.TextDataModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTextData indicates an expected call of GetAllTextData.
func (mr *MockStorageMockRecorder) GetAllTextData(ctx, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTextData", reflect.TypeOf((*MockStorage)(nil).GetAllTextData), ctx, uID)
}

// GetBinByName mocks base method.
func (m *MockStorage) GetBinByName(ctx context.Context, name string, uID int64) (models.BinaryDataModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBinByName", ctx, name, uID)
	ret0, _ := ret[0].(models.BinaryDataModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBinByName indicates an expected call of GetBinByName.
func (mr *MockStorageMockRecorder) GetBinByName(ctx, name, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBinByName", reflect.TypeOf((*MockStorage)(nil).GetBinByName), ctx, name, uID)
}

// GetCardByName mocks base method.
func (m *MockStorage) GetCardByName(ctx context.Context, name string, uID int64) (models.CardModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardByName", ctx, name, uID)
	ret0, _ := ret[0].(models.CardModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardByName indicates an expected call of GetCardByName.
func (mr *MockStorageMockRecorder) GetCardByName(ctx, name, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardByName", reflect.TypeOf((*MockStorage)(nil).GetCardByName), ctx, name, uID)
}

// GetLoginByName mocks base method.
func (m *MockStorage) GetLoginByName(ctx context.Context, name string, uID int64) (models.LoginModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginByName", ctx, name, uID)
	ret0, _ := ret[0].(models.LoginModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginByName indicates an expected call of GetLoginByName.
func (mr *MockStorageMockRecorder) GetLoginByName(ctx, name, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginByName", reflect.TypeOf((*MockStorage)(nil).GetLoginByName), ctx, name, uID)
}

// GetTextDataByName mocks base method.
func (m *MockStorage) GetTextDataByName(ctx context.Context, name string, uID int64) (models.TextDataModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextDataByName", ctx, name, uID)
	ret0, _ := ret[0].(models.TextDataModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextDataByName indicates an expected call of GetTextDataByName.
func (mr *MockStorageMockRecorder) GetTextDataByName(ctx, name, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextDataByName", reflect.TypeOf((*MockStorage)(nil).GetTextDataByName), ctx, name, uID)
}

// GetUserHash mocks base method.
func (m *MockStorage) GetUserHash(ctx context.Context, login string) (int64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHash", ctx, login)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserHash indicates an expected call of GetUserHash.
func (mr *MockStorageMockRecorder) GetUserHash(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHash", reflect.TypeOf((*MockStorage)(nil).GetUserHash), ctx, login)
}

// SaveBin mocks base method.
func (m *MockStorage) SaveBin(ctx context.Context, binData models.BinaryDataModel, uID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBin", ctx, binData, uID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveBin indicates an expected call of SaveBin.
func (mr *MockStorageMockRecorder) SaveBin(ctx, binData, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBin", reflect.TypeOf((*MockStorage)(nil).SaveBin), ctx, binData, uID)
}

// SaveCard mocks base method.
func (m *MockStorage) SaveCard(ctx context.Context, card models.CardModel, uID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCard", ctx, card, uID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveCard indicates an expected call of SaveCard.
func (mr *MockStorageMockRecorder) SaveCard(ctx, card, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCard", reflect.TypeOf((*MockStorage)(nil).SaveCard), ctx, card, uID)
}

// SaveLogin mocks base method.
func (m *MockStorage) SaveLogin(ctx context.Context, login models.LoginModel, uID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLogin", ctx, login, uID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveLogin indicates an expected call of SaveLogin.
func (mr *MockStorageMockRecorder) SaveLogin(ctx, login, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLogin", reflect.TypeOf((*MockStorage)(nil).SaveLogin), ctx, login, uID)
}

// SaveText mocks base method.
func (m *MockStorage) SaveText(ctx context.Context, text models.TextDataModel, uID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveText", ctx, text, uID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveText indicates an expected call of SaveText.
func (mr *MockStorageMockRecorder) SaveText(ctx, text, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveText", reflect.TypeOf((*MockStorage)(nil).SaveText), ctx, text, uID)
}

// SaveUser mocks base method.
func (m *MockStorage) SaveUser(ctx context.Context, user models.UserModel) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockStorageMockRecorder) SaveUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockStorage)(nil).SaveUser), ctx, user)
}

// Sync mocks base method.
func (m *MockStorage) Sync(ctx context.Context, model models.SyncModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockStorageMockRecorder) Sync(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockStorage)(nil).Sync), ctx, model)
}

// UpdateBin mocks base method.
func (m *MockStorage) UpdateBin(ctx context.Context, data models.BinaryDataModel, uID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBin", ctx, data, uID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBin indicates an expected call of UpdateBin.
func (mr *MockStorageMockRecorder) UpdateBin(ctx, data, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBin", reflect.TypeOf((*MockStorage)(nil).UpdateBin), ctx, data, uID)
}

// UpdateCard mocks base method.
func (m *MockStorage) UpdateCard(ctx context.Context, card models.CardModel, uID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCard", ctx, card, uID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockStorageMockRecorder) UpdateCard(ctx, card, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockStorage)(nil).UpdateCard), ctx, card, uID)
}

// UpdateLogin mocks base method.
func (m *MockStorage) UpdateLogin(ctx context.Context, auth models.LoginModel, uID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLogin", ctx, auth, uID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLogin indicates an expected call of UpdateLogin.
func (mr *MockStorageMockRecorder) UpdateLogin(ctx, auth, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLogin", reflect.TypeOf((*MockStorage)(nil).UpdateLogin), ctx, auth, uID)
}

// UpdateText mocks base method.
func (m *MockStorage) UpdateText(ctx context.Context, data models.TextDataModel, uID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateText", ctx, data, uID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateText indicates an expected call of UpdateText.
func (mr *MockStorageMockRecorder) UpdateText(ctx, data, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateText", reflect.TypeOf((*MockStorage)(nil).UpdateText), ctx, data, uID)
}
